C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE main.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /* –ü—Ä–æ–≥—Ä–∞–º–º–∞ - —Ç–µ—Ä–º–æ–º–µ—Ç—Ä OneWire DS18B20+ —Å –≤—ã–≤–æ–¥–æ–º –Ω–∞ LCD WH0802 */
   2          /* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–ª–∞—Ç–∞ MicroConverter SAR Eval Board Rev A3, –ö–≤–∞—Ä—Ü 11,059 –ú–ì—Ü */
   3          /* 19 —è–Ω–≤–∞—Ä—è 2021 */
   4          
   5          #include <ADuC841.h>  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—
             -Ä–æ–ª–ª–µ—Ä–∞ ADuC841
   6          
   7          
   8              sbit DQ=P3^7;       // –í—ã–≤–æ–¥ DQ –¥–∞—Ç—á–∏–∫–∞ DS18B20 —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º 1-wire
   9              sbit RS=P2^5;       // –í—ã–≤–æ–¥ LCD –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã/—Å–∏–º–≤–æ–ª–∞. ‚Äú1‚Äù ‚Äì —Å–∏–º–≤
             -–æ–ª, ‚Äú0‚Äù-–∫–æ–º–∞–Ω–¥–∞
  10              sbit RW=P2^6;       // –í—ã–≤–æ–¥ LCD —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏. ‚Äú0‚Äù ‚Äì –∑–∞–ø–∏—Å—å, ‚Äú1‚Äù ‚Äì
             - —á—Ç–µ–Ω–∏–µ
  11              sbit E=P2^7;        // –°—Ç—Ä–æ–± –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏—Å–ø–ª–µ–π
  12          
  13              sbit LED=P3^4;      // –í—ã–≤–æ–¥ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–ª–∞—Ç–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥ D
             -1
  14           
  15           #define COMAND RS=0;    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ LCD
  16           #define RWDATA RS=1;    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ LCD
  17           #define WRITELCD RW=0;  // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ LCD - –∑–∞–ø–∏—Å—å
  18           #define READLCD RW=1;   // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ LCD - —á—Ç–µ–Ω–∏–µ
  19          
  20          char LCD_Print_Select = 0;  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ –¥–
             -∏—Å–ø–ª–µ–π
  21          
  22          /* –í—Ä–µ–º—è —É—Å—Ç–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ "—Ç–∏–∫–∞—Ö" —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞, –æ–¥–∏
             -–Ω —Ç–∞–∫–æ–π "—Ç–∏–∫" = 5,93 –º–∏–ª–∏—Å–µ–∫—É–Ω–¥ */
  23          
  24          const unsigned int ButtonHoldTime = 60 ;            // –í—Ä–µ–º—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç
             - –¥—Ä–µ–±–µ–∑–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (~355 –º—Å)
  25          const unsigned int LCDTextRefresh = 90 ;            // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –
             -¥–∏—Å–ø–ª–µ–µ (~533 –º—Å)
  26          
  27          int TicksHold = 0;   // —Å—á–µ—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –¥—Ä–
             -µ–±–µ–∑–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  28          int TicksRefr = 0;   // —Å—á–µ—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  29          bit Holdbit = 0;     // –±–∏—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–ø—Ä–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –
             -ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
  30          bit OW_Enabled = 0;  // –±–∏—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ DS18B20+ –Ω–∞ –ª–∏–Ω–∏–∏ DQ
  31          
  32          
  33          
  34          char OWRomCode [8];       // –ú–∞—Å—Å–∏–≤ –±–∞–π—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 64-–±–∏—Ç–Ω–æ–≥–æ ROM –∫–æ–¥–∞ 
             -—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ One-Wire
  35          char OWScratchpad [9];    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Scratchpad —É—Å—Ç—
             -Ä–æ–π—Å—Ç–≤–∞ One-Wire
  36          
  37          /*  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∏–∫–æ–≤ tickDelay –¥–ª—è –¥–ª—è 1
             --wire –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å AN126 */
  38          // A = 4, B = 42, C = 40, D = 7, E = 6, F = 37, G = 0, H = 315, I = 46, J = 269;
  39          
  40          unsigned int z; // –í–Ω–µ—Å–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä—å tickDelay —É–º–µ–Ω—å—à–∞–µ—Ç –≤—Ä–µ
             -–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è tickDelay =) 
  41            
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 2   

  42          void tickDelay(unsigned int delayTime)  // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã–∂–∏–∞–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ 
  43          {
  44   1        // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö Tnom. 
  45   1        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ —Ç–æ–≥–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ) Nticks = Tnom/1.5
  46   1          
  47   1        for (z=0; z < delayTime; z++);
  48   1      }
  49          
  50          /* ------------------------- One-Wire Interface Basic Functions -------------------------*/
  51          // ----------------------------------------------------------------------------------------
  52          void OW_WriteBit(bit CBIT)  // Send a 1-Wire write bit. Provide 10us recovery time.
  53          {
  54   1        if (CBIT == 1)    // Write '1' bit
  55   1        {
  56   2          DQ=0;           // Drives DQ low
  57   2          tickDelay(4);   // Timing 'A'
  58   2          DQ=1;           // Releases the bus (DQ to high)
  59   2          tickDelay(42);  // Timing 'B'
  60   2        }
  61   1        else
  62   1        {
  63   2          DQ=0;           // Drives DQ low
  64   2          tickDelay(40);  // Timing 'C'
  65   2          DQ=1;           // Releases the bus (DQ to high)
  66   2          tickDelay(7);   // Timing 'D'
  67   2        }
  68   1      }
  69          
  70          int OW_ReadBit (void)
  71          {
  72   1        int result;
  73   1        DQ=0;           // Drives DQ low
  74   1        tickDelay(4);   // Timing 'A'
  75   1        DQ=1;           // Releases the bus (DQ to high)
  76   1        tickDelay(6);   // Timing 'E'
  77   1        result = DQ;
  78   1        tickDelay(37);  // Timing 'F'
  79   1        return result;
  80   1      }
  81          
  82          void OW_WriteByte(int datain)
  83          {
  84   1      int loop;
  85   1      // Loop to write each bit in the byte, LS-bit first
  86   1      for (loop = 0; loop < 8; loop++)
  87   1      {
  88   2      OW_WriteBit(datain & 0x01);
  89   2      // shift the data byte for the next bit
  90   2      datain >>= 1;
  91   2      }
  92   1      }
  93          
  94          int OW_ReadByte(void)
  95          {
  96   1      int loop, result=0;
  97   1      for (loop = 0; loop < 8; loop++)
  98   1      {
  99   2      // shift the result to get it ready for the next bit
 100   2      result >>= 1;
 101   2      // if result is one, then set MS bit
 102   2      if (OW_ReadBit()) result |= 0x80;
 103   2      }
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 3   

 104   1      return result;
 105   1      }
 106          
 107          // Generate a 1-Wire reset, return 1 if no presence detect was found, return 0 otherwise.
 108          int OW_TReset(void)
 109          {
 110   1      int result;
 111   1                        // tickDelay(G) _ G =0
 112   1      DQ = 0;           // Drives DQ low  
 113   1      tickDelay(315);   // Timing 'H' = 480 us 
 114   1      DQ = 1;           // Releases the bus 
 115   1      tickDelay(46);    // Timing 'I' = 70 us
 116   1      result = DQ;      // Sample for presence pulse from slave 
 117   1      tickDelay(269);   // Complete the reset sequence recovery
 118   1      return result;    // Return sample presence pulse result
 119   1      }
 120          
 121          void OW_Read_ROM_Code (void)        // Send Command [33h] and Read 8 Bytes
 122          {
 123   1      unsigned int Y;
 124   1        
 125   1      OW_WriteByte(0x33);               // Read Rom [33h] Function Command
 126   1       
 127   1      for (Y = 0; Y < 8; Y++)
 128   1      {
 129   2      OWRomCode[Y] = OW_ReadByte();
 130   2      } 
 131   1      }
 132          
 133          void OW_Match_ROM_Code (void)         // Send Command [55h] and ROM
 134          {
 135   1      unsigned int Y;
 136   1      OW_WriteByte(0x55);                 // Match Rom [55h] Function Command  
 137   1        
 138   1      for (Y = 0; Y < 8; Y++)
 139   1      {
 140   2      OW_WriteByte (OWRomCode[Y]);
 141   2      }
 142   1      }
 143          
 144          
 145          void OW_Convert_T (void)
 146          {
 147   1      OW_WriteByte(0x44);                 // Master issues Convert T command [44h]
 148   1        
 149   1      DQ = 1;
 150   1      LED = 1;
 151   1        
 152   1      while (DQ == 0)
 153   1      {
 154   2      }  
 155   1      LED = 0;
 156   1      
 157   1      }
 158          
 159          void OW_ReadScratchpad(void)        // Send Command [BEh] and Read 9 Bytes
 160          {
 161   1       unsigned int i;
 162   1       OW_WriteByte(0xBE);                // Master issues Read Scratchpad command [BEh]
 163   1        
 164   1        for (i = 0; i < 9; i++)
 165   1      {
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 4   

 166   2      OWScratchpad [i] = OW_ReadByte();   // Read 9 Bytes - 0 to 8
 167   2      } 
 168   1      }
 169          
 170          
 171          char OW_CRC_Byte (char InCRC, char InBit)  // CRC 1-Wire  (Byte)     
 172          {
 173   1        char XorBit = 0x00;
 174   1        char NewCRC = 0x00; 
 175   1        InBit &= 0x01;
 176   1        
 177   1                   // CRC Algorithm with Polynomial = X8 + X5 + X4 + 1  
 178   1        
 179   1        XorBit = ((InCRC&0x01)^InBit)&0x01;
 180   1        NewCRC |= (   (XorBit<<7)&0x80);                      // bit 8
 181   1        NewCRC |= ((  (InCRC&0x80)>>1)&0x40);                 // bit 7
 182   1        NewCRC |= ((  (InCRC&0x40)>>1)&0x20);                 // bit 6
 183   1        NewCRC |= ((  (InCRC&0x20)>>1)&0x10);                 // bit 5
 184   1        NewCRC |= (((((InCRC&0x10)>>4)^XorBit)<<3)&0x08);     // bit 4
 185   1        NewCRC |= (((((InCRC&0x08)>>3)^XorBit)<<2)&0x04);     // bit 3
 186   1        NewCRC |= ((  (InCRC&0x04)>>1)&0x02);                 // bit 2
 187   1        NewCRC |= ((  (InCRC&0x02)>>1)&0x01);                 // bit 1
 188   1       
 189   1        return NewCRC;
 190   1      }
 191          
 192          char OW_CRC_ScPad (void) // CRC calculation for DS18B20 Scratchpad
 193          {
 194   1        char ScpadCRC = 0x00;  
 195   1        char Y;
 196   1        
 197   1      for (Y = 0; Y < 8; Y++)
 198   1        {
 199   2          char ZY;
 200   2          for (ZY = 0; ZY < 8; ZY++)
 201   2          {
 202   3            char OurBit = (OWScratchpad [Y] >> ZY) & 0x01;
 203   3            ScpadCRC = OW_CRC_Byte(ScpadCRC, OurBit);
 204   3          }
 205   2        } 
 206   1        return ScpadCRC; 
 207   1      }
 208          
 209          char OW_CRC_ROM (void) // CRC calculation for DS18B20 ROM (Serial Number)
 210          {
 211   1        char RomCRC = 0x00; 
 212   1        char Y;
 213   1        
 214   1      for (Y = 0; Y < 7; Y++)
 215   1        {
 216   2          char ZY;
 217   2          for (ZY = 0; ZY < 8; ZY++)
 218   2          {
 219   3            char OurBit = (OWRomCode [Y] >> ZY) & 0x01;
 220   3            RomCRC = OW_CRC_Byte(RomCRC, OurBit);
 221   3          }
 222   2        } 
 223   1      
 224   1        return RomCRC; 
 225   1      }
 226          
 227          void OW_ReadTemp(void)
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 5   

 228          {
 229   1      
 230   1      OW_TReset();
 231   1      OW_Match_ROM_Code();
 232   1      OW_Convert_T();
 233   1      OW_TReset();
 234   1      OW_Match_ROM_Code();  
 235   1      OW_ReadScratchpad();
 236   1      
 237   1      }
 238          
 239          
 240          // ----------------------------------------------------------------------------------------
 241          
 242          /* ------------------------------ LCD WH0802 Functions -----------------------------------*/
 243          
 244          void SEND (unsigned char SDAT )     // WH0802A Display Write Function with strobe
 245          {
 246   1      
 247   1      P0 = SDAT;                          // WR DATA to Port 0; 
 248   1      tickDelay(3);
 249   1      E = 1;
 250   1      tickDelay(3);
 251   1      E = 0;
 252   1      tickDelay(3); 
 253   1      P0 &= ~0xFF;                        // Reset Data Bits (P0 = 0000_0000)
 254   1      tickDelay(27);                      // Wait for more than 39us  
 255   1      }
 256          
 257          char ConvertChar_LCD ( unsigned char InChar)          // Convert Hex 0-F Number into WH0802A CODE
 258           {
 259   1          char OutChar = 0x00;
 260   1         
 261   1          
 262   1          if (InChar < 0x01) InChar = 0x00;
 263   1         
 264   1          if (InChar == 0x00) OutChar = 0x30;
 265   1          if (InChar == 0x01) OutChar = 0x31;
 266   1          if (InChar == 0x02) OutChar = 0x32;
 267   1          if (InChar == 0x03) OutChar = 0x33;
 268   1          if (InChar == 0x04) OutChar = 0x34;
 269   1          if (InChar == 0x05) OutChar = 0x35;
 270   1          if (InChar == 0x06) OutChar = 0x36;
 271   1          if (InChar == 0x07) OutChar = 0x37;
 272   1          if (InChar == 0x08) OutChar = 0x38;
 273   1          if (InChar == 0x09) OutChar = 0x39;
 274   1         
 275   1          if (InChar == 0x0A) OutChar = 0x41;
 276   1          if (InChar == 0x0B) OutChar = 0x42;
 277   1          if (InChar == 0x0C) OutChar = 0x43;
 278   1          if (InChar == 0x0D) OutChar = 0x44;
 279   1          if (InChar == 0x0E) OutChar = 0x45;
 280   1          if (InChar == 0x0F) OutChar = 0x46;   
 281   1          
 282   1          if (InChar > 0x0F) OutChar = 0x3F;
 283   1          
 284   1         return OutChar;
 285   1      }
 286          
 287          void InitializingLCD_8bit (void)
 288          {
 289   1        
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 6   

 290   1      tickDelay(0x7530);          // Wait for more than 40 ms after VDDrises to 4.5 V
 291   1      SEND(0x38);                   // Function set, 8bit, 2-line
 292   1      tickDelay(27);                 // Wait for more than 39us
 293   1      SEND(0x38);                   // Function set, 8bit, 2-line
 294   1      tickDelay(27);                 // Wait for more than 39us  
 295   1      SEND(0x0C);                   // Display Set (No Cursor & No Blinking)
 296   1      tickDelay(34);                 // Wait for more than 50 us
 297   1      SEND(0x01);                   // Display Clear
 298   1      tickDelay(1020);               // Wait for more than 1.53ms
 299   1      SEND(0x06);                   // Entery Mode Set (Right-Moving Cursor)
 300   1      tickDelay(34);                 // Wait for more than 50 us 
 301   1      }
 302          
 303          void  LCD_Print_OneWire_NA (void)
 304          {
 305   1        unsigned int A;
 306   1        
 307   1      COMAND; 
 308   1      SEND(0x80) ; // First Line
 309   1      RWDATA;      // 
 310   1      SEND(0x44); SEND(0x53); SEND(0x31); SEND(0x38); SEND(0x42); SEND(0x32); SEND(0x30); SEND(0x2B); 
 311   1      COMAND; 
 312   1      SEND(0xC0) ; // 2-nd line
 313   1      RWDATA;
 314   1      SEND(0x50); SEND(0x33); SEND(0x2E); SEND(0x37); SEND(0x20); SEND(0x45); SEND(0x52); SEND(0x52); 
 315   1      
 316   1        for (A=0; A < 10; A++)
 317   1        {
 318   2        tickDelay(0xFFFF);  
 319   2        }
 320   1      }
 321          
 322          
 323          void LCD_Print_Temp (void)
 324          {
 325   1        unsigned char Te;   // "Te" - —Ü–µ–ª–∞—è —á–∞—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –º–∞–∫—Å–∏–
             -º—É–º +125
 326   1        unsigned int Tf;    // "Tf" - –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
 327   1        unsigned char Tm;   // "Tm" - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
 328   1        char SignT;         //  –ó–Ω–∞–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ –¥–∏—Å–ø–ª–µ—è
 329   1        
 330   1        OW_ReadTemp();      // –ß–∏—Ç–∞–µ–º Scratchpad –∏–∑ –¥–∞—Ç—á–∏–∫–∞ DS18B20+
 331   1        
 332   1        
 333   1        if (OWScratchpad[8] == OW_CRC_ScPad())    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CRC -> —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω
             -–∏–µ –∏–∑ –¥–∞—Ç—á–∏–∫–∞ —Å —Ä–∞—Å—á–µ—Ç–Ω—ã–º
 334   1          {                                       // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è CRC —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ –≤—ã
             -–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –Ω–∏–∂–µ
 335   2      
 336   2            Te = ((OWScratchpad[1] & 0x07) << 4) | ((OWScratchpad[0] >> 4) & 0x0F); //—Å–æ–±–∏—Ä–∞–µ–º –∏–∑ —á–∞
             -—Å—Ç–µ–π –¥–≤—É—Ö 
 337   2            Tf = ((OWScratchpad[0] & 0x0F) * 625)/100; // –î—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å 0,625 —Ö 4 –±–∏—Ç–∞ (0,625 *
             - 15 = 0,5 –≥—Ä–∞–¥—É—Å–∞)
 338   2            Tm = ((OWScratchpad[0] & 0x0F) * 625)%100; // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è 
             -–¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É               
 339   2            if (Tm > 50) Tf++;  // –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 100 –±–æ–ª—å—à–µ 50 (–≤–∫–ª—
             -é—á–∏—Ç–µ–ª—å–Ω–æ) —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º Tf –Ω–∞ 1;
 340   2            
 341   2                                // –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑
             -–Ω–∞—á–µ–Ω–∏–µ
 342   2                                if  ((OWScratchpad[1] >> 4) == 0x00)     
 343   2                                  {
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 7   

 344   3                                      // –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–æ–≤–Ω–æ "0"
 345   3                                      if ((OWScratchpad[0] == 0) & (OWScratchpad[1]) == 0) 
 346   3                                      { SignT = 0x20; //  –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª " " —Ç.–µ. –ø—Ä–æ–±–µ–ª 
 347   4                                      } else { SignT = 0x2B; }   // –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª "+"
 348   3                                    
 349   3                                  } 
 350   2                                  else      // –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω
             -–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 351   2                                  {
 352   3                                      SignT = 0x2D; // –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª "-"        
 353   3                                      Te = (0x7F - Te); 
 354   3                                      Tf = (100-Tf);
 355   3                                  }
 356   2      
 357   2                    COMAND; 
 358   2                    SEND(0x01);                     // Display Clear
 359   2                    tickDelay(1030);                // Wait for more than 1.53ms
 360   2                      
 361   2                    COMAND; 
 362   2                    SEND(0x80) ; // First Line  - Temp
 363   2                    RWDATA;
 364   2                         
 365   2                    SEND(SignT);
 366   2                      
 367   2                    if ((Te/100)>0) SEND(ConvertChar_LCD(Te/100)); 
 368   2                    SEND(ConvertChar_LCD((Te%100)/10));
 369   2                    SEND(ConvertChar_LCD((Te%100)%10));  
 370   2                    SEND(0x2E);
 371   2                    SEND(ConvertChar_LCD(Tf/10));
 372   2                      if ((Te/100) == 0) SEND(ConvertChar_LCD(Tf%10)); 
 373   2                    SEND(0xEF);  SEND(0x43); 
 374   2                      
 375   2                    COMAND; 
 376   2                    SEND(0xC0) ; // 2-nd line - "DS18B20+"
 377   2                    RWDATA;
 378   2      
 379   2                    SEND(0x44); SEND(0x53); SEND(0x31); SEND(0x38); SEND(0x42); SEND(0x32); SEND(0x30); SEND(0x2
             -B); 
 380   2          } 
 381   1          else  
 382   1                {
 383   2                COMAND; SEND(0x80); RWDATA; // First Line "DS18B20+"
 384   2                SEND(0x44); SEND(0x53); SEND(0x31); SEND(0x38); SEND(0x42); SEND(0x32); SEND(0x30); SEND(0x2B);
 385   2                COMAND; SEND(0xC0); RWDATA; // Second Line "CRC ERR."
 386   2                SEND(0x43); SEND(0x52); SEND(0x43); SEND(0x20); SEND(0x45); SEND(0x52); SEND(0x52); SEND(0x2E);
 387   2                }
 388   1      }
 389          
 390          void LCD_Print_RomCode(void)
 391          {
 392   1       
 393   1        unsigned int Y; 
 394   1        
 395   1        //OW_Read_ROM_Code();
 396   1        
 397   1        COMAND; 
 398   1        SEND(0x01);                   // Display Clear
 399   1        tickDelay(1030);              // Wait for more than 1.53ms
 400   1        
 401   1        COMAND; 
 402   1        SEND(0x80) ; // First Line
 403   1        RWDATA; 
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 8   

 404   1        
 405   1        for (Y = 0; Y < 8; Y++)
 406   1        {
 407   2          if (Y==4)
 408   2          {
 409   3          COMAND; 
 410   3          SEND(0xC0) ; 
 411   3          RWDATA;
 412   3          }
 413   2          SEND (ConvertChar_LCD ((OWRomCode [Y]>>4) & 0x0F));  
 414   2          SEND (ConvertChar_LCD (OWRomCode [Y] & 0x0F));  
 415   2        } 
 416   1      
 417   1      }
 418          
 419          void LCD_Print_ScrPad8(void)
 420          {
 421   1       
 422   1        unsigned int Y; 
 423   1       
 424   1        OW_ReadTemp();      // –ß–∏—Ç–∞–µ–º Scratchpad –∏–∑ –¥–∞—Ç—á–∏–∫–∞ DS18B20+
 425   1        
 426   1        COMAND; 
 427   1        SEND(0x01);                   // Display Clear
 428   1        tickDelay(1030);              // Wait for more than 1.53ms
 429   1        
 430   1        COMAND; 
 431   1        SEND(0x80) ; // First Line
 432   1        RWDATA; 
 433   1        
 434   1        for (Y = 0; Y < 8; Y++)
 435   1        {
 436   2          if (Y==4)
 437   2          {
 438   3          COMAND; 
 439   3          SEND(0xC0) ; 
 440   3          RWDATA;
 441   3          }
 442   2          SEND (ConvertChar_LCD ((OWScratchpad [Y]>>4) & 0x0F));  
 443   2          SEND (ConvertChar_LCD (OWScratchpad [Y] & 0x0F));  
 444   2        } 
 445   1      
 446   1      }
 447          
 448          
 449          void LCD_Print_ADC(char CHAN)
 450          {
 451   1          unsigned long int AdcRawData = 0;   // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
             -–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ê–¶–ü
 452   1          
 453   1          unsigned int dectemp = 1000; 
 454   1          unsigned int hextemp;
 455   1          unsigned int zz = 0;  
 456   1          
 457   1          char TTEMP[4] = {0,0,0,0};
 458   1        
 459   1          ADCCON2 = CHAN ;  
 460   1          SCONV = 1;
 461   1      
 462   1          while ( ADCCON3 != 0)
 463   1          {
 464   2          
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 9   

 465   2          }
 466   1           
 467   1          AdcRawData = (ADCDATAH & 0x0F) << 8;
 468   1          AdcRawData += ADCDATAL;
 469   1          
 470   1          hextemp = ((AdcRawData * 5000)/4096) & 0xFFFF;
 471   1           
 472   1           for (zz=0; zz < 4; zz++)
 473   1        { 
 474   2          TTEMP[zz] = (hextemp/dectemp);
 475   2          hextemp = hextemp - (TTEMP[zz] * dectemp);
 476   2          dectemp = dectemp/10; 
 477   2          
 478   2        }
 479   1        
 480   1          COMAND; 
 481   1          SEND(0x01);                     // Display Clear
 482   1          tickDelay(1030);                // Wait for more than 1.53ms
 483   1        
 484   1          COMAND; 
 485   1          SEND(0x80) ; // First Line "ADC'
 486   1          RWDATA;
 487   1          SEND(0x41); SEND(0x44); SEND(0x43); SEND(0x20);
 488   1      
 489   1          if (CHAN == 8) {
 490   2            SEND(0x54);
 491   2            SEND(0x2E); 
 492   2          } 
 493   1          else 
 494   1            {
 495   2          SEND(ConvertChar_LCD(CHAN));
 496   2            }      
 497   1        
 498   1          COMAND; 
 499   1          SEND(0xC0) ; // 2-nd Line = Voltage
 500   1          RWDATA;
 501   1        
 502   1            SEND(ConvertChar_LCD(TTEMP[0]));
 503   1            SEND(0x2E);
 504   1            SEND(ConvertChar_LCD(TTEMP[1]));
 505   1            SEND(ConvertChar_LCD(TTEMP[2]));
 506   1            SEND(ConvertChar_LCD(TTEMP[3]));
 507   1            SEND(0x20);
 508   1            SEND(0x56);
 509   1      }
 510          
 511          void LCD_Print_Selected_One (void)
 512          {
 513   1      
 514   1        if (LCD_Print_Select < 9)
 515   1        {
 516   2          LCD_Print_ADC(LCD_Print_Select);
 517   2        }
 518   1        else
 519   1        {
 520   2        
 521   2        switch (LCD_Print_Select)
 522   2        {
 523   3          case 9:
 524   3          {
 525   4            LCD_Print_Temp();
 526   4            break;
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 10  

 527   4          }
 528   3          
 529   3          case 10:
 530   3          {
 531   4            LCD_Print_ScrPad8();
 532   4            break;
 533   4          }
 534   3          
 535   3          case 11:
 536   3          {
 537   4            LCD_Print_RomCode();
 538   4            break;
 539   4          }
 540   3          
 541   3        }
 542   2      }
 543   1      }
 544          
 545          void int0 (void) interrupt 0    // –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
             - (–ø–µ—Ä–µ—Ö–æ–¥ –≤—ã–≤–æ–¥–∞ INT0 c –ª–æ–≥.1 –Ω–∞ –ª–æ–≥.0)
 546          {
 547   1        
 548   1        /* –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—Ä–µ–±–µ–∑–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–
             -æ –∫–Ω–æ–ø–∫–µ INT0 */ 
 549   1        
 550   1       if (!Holdbit)
 551   1       {
 552   2        
 553   2      TL0 = 0; TH0 = 0;           // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ 0
 554   2      TR0 = 1;                    // –ó–∞–ø—É—Å–∫–∞–µ–º –¢–∞–π–º–µ—Ä 0
 555   2      Holdbit = 1;   
 556   2        
 557   2      LCD_Print_Select++;
 558   2      if (LCD_Print_Select > 11) LCD_Print_Select = 0;
 559   2        
 560   2      LCD_Print_Selected_One();
 561   2       
 562   2       } 
 563   1      }
 564          
 565          void T0Isr (void) interrupt 1   // –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –¢–∞–π–º–µ—Ä–∞ 0
 566          {
 567   1        TF0 = 0;  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
 568   1        
 569   1        if (TicksHold < ButtonHoldTime )
 570   1        { 
 571   2            TicksHold++;      // —Å—á–µ—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1  
 572   2            
 573   2            TR0 = 1;              // –ó–∞–ø—É—Å–∫–∞–µ–º –¢–∞–π–º–µ—Ä 0 –≤–Ω–æ–≤—å
 574   2           
 575   2        } 
 576   1        else
 577   1        {   
 578   2            TR0 = 0;
 579   2            TicksHold = 0;    // –û–±–Ω—É–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
 580   2            Holdbit = 0;
 581   2        }
 582   1      }
 583           
 584          void main (void)  //–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
 585          {
 586   1      int times = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 11  

 587   1        
 588   1      RS = 0; RW = 0; 
 589   1      E = 0; P0 = 0x00;           // –û–±–Ω—É–ª—è–µ–º –≤—ã–≤–æ–¥—ã LCD
 590   1         
 591   1      EA = 1;                     // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
 592   1      INT0 = 1;                   // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ P3.2 –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ñ—É–Ω–∫—
             -Ü–∏—é - –≤—Ö–æ–¥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è INT0
 593   1      EX0 = 1;                    // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ –≤—Ö–æ–¥—É INT0 (–ø–æ –Ω–∞–∂–∞
             -—Ç–∏—é –∫–Ω–æ–ø–∫–∏)
 594   1      IT0 = 1;                    // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ INT0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∞–¥–æ–º
             - —Å –ª–æ–≥.1 –Ω–∞ –ª–æ–≥.0
 595   1      PX0 = 1;                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Å—à–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–
             -Ω–∏—è –ø–æ INT0 (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
 596   1      ET0 = 1;                    // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –¢–∞–π–º–µ—Ä 0
 597   1      
 598   1      TMOD |= 0x1;                // –¢–∞–π–º–µ—Ä—ã 0 —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ä–µ–∂–∏–º 16-—Ç–∏ —Ä–∞–∑—Ä—è–
             -¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ 
 599   1        
 600   1      ADCCON1 = 0x08C;            // power up ADC /32 + 4 acq clock
 601   1       
 602   1      DQ = 1;                     // –ü–æ–¥–¥—Ç—è–≥–∏–≤–∞–µ–º –®–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö 1-wire –∫ +5–í (Pull-up —Ä–µ–
             -∑–∏—Å—Ç–æ—Ä)
 603   1      
 604   1        
 605   1      InitializingLCD_8bit();
 606   1      
 607   1        if (OW_TReset() & 0x01)   // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ One-Wire –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, —Ç–æ –Ω–∞
             - —ç–∫—Ä–∞–Ω –≤—ã–≤–æ–¥–∏—Ç—Å—è
 608   1          {                       // –°–æ–æ–±—â–µ–Ω–∏–µ: DS18B20+ –ù–ï –ü–û–î–ö–õ
 609   2            LCD_Print_OneWire_NA();
 610   2          }
 611   1        else                      // —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1-Wire –æ—Ç–≤–µ—Ç–∏–ª–æ "Presence" 
 612   1      {
 613   2        OW_Read_ROM_Code();         // —á–∏—Ç–∞–µ–º –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 614   2      
 615   2        /* –ï—Å–ª–∏ –∫–æ–¥ —É—Å—Ç—Ä–æ–π—Ç—Å–≤–∞ OW_FamilyCode = 028h –∏ —Ä–∞—Å—á–µ—Ç CRC –≤–µ—Ä–µ–Ω —Ç–æ –ó–∞–∂–
             -∏–≥–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥ (LED=0) */  
 616   2        if ((OWRomCode[0]==0x28) & (OWRomCode[7] == OW_CRC_ROM()) ) 
 617   2          
 618   2        {
 619   3          LED = 0;                  // –ó–∞–∂–∏–≥–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥ (LED=0)
 620   3          OW_Enabled = 1;           // —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1-wire –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 621   3          LCD_Print_Select = 9;     // –í—ã–≤–æ–¥–∏–º –Ω–∞ –¥–∏—Å–ø–ª–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
 622   3          LCD_Print_Selected_One(); // –ü–æ–µ—Ö–∞–ª–∏ )))
 623   3        }
 624   2         
 625   2      }
 626   1      
 627   1      while (1) /* –í–µ—Å—å–º–∞ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª */
 628   1      {
 629   2        
 630   2        times++;
 631   2        if (times == 4320)
 632   2        {
 633   3          times = 0;
 634   3          TicksRefr++;
 635   3            if (TicksRefr == LCDTextRefresh)
 636   3            {
 637   4            TicksRefr = 0;
 638   4              LCD_Print_Selected_One();
 639   4            }
 640   3          
C51 COMPILER V9.53.0.0   MAIN                                                              01/19/2021 17:30:46 PAGE 12  

 641   3        }
 642   2              
 643   2      
 644   2      }
 645   1      
 646   1      } // END OF FILE
 647          
 648          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2012    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
